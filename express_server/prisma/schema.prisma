generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                        Int                         @id @default(autoincrement())
  email                     String                      @unique
  name                      String
  password                  String
  fullname                  String
  user_id                   String                      @unique
  username                  String                      @unique
  admin                     Boolean                     @default(false)
  role                      UserRole                    @default(fan)
  is_active                 Boolean                     @default(true)
  is_verified               Boolean                     @default(false)
  is_email_verified         Boolean                     @default(false)
  is_model                  Boolean                     @default(false)
  email_verify_code         String?
  email_verify_time         DateTime?
  is_phone_verified         Boolean                     @default(false)
  phone                     String                      @unique
  profile_image             String?                     @default("/site/avatar.png")
  profile_banner            String?                     @default("/site/banner.png")
  bio                       String?                     @db.Text
  location                  String?
  website                   String?
  country                   String?
  state                     String?
  city                      String?
  zip                       String?
  post_watermark            String?
  total_followers           Int                         @default(0)
  total_following           Int                         @default(0)
  total_subscribers         Int                         @default(0)
  admin_status              Boolean                     @default(true)
  created_at                DateTime                    @default(now())
  updated_at                DateTime                    @updatedAt
  Follow                    Follow[]
  LiveStream                LiveStream[]
  LiveStreamComment         LiveStreamComment[]
  LiveStreamLike            LiveStreamLike[]
  LiveStreamView            LiveStreamView[]
  Notifications             Notifications[]
  PostLike                  PostLike[]
  PostShared                PostShared[]
  ReportComment             ReportComment[]
  ReportLive                ReportLive[]
  ReportMessage             ReportMessage[]
  ReportPost                ReportPost[]
  ReportUser                ReportUser[]
  Settings                  Settings?
  Subscribers               Subscribers[]
  UserPoints                UserPoints?
  UserRepost                UserRepost[]
  UserStory                 UserStory[]
  UserSubscriptionCurrent   UserSubscriptionCurrent[]
  UserTransaction           UserTransaction[]
  UserWallet                UserWallet[]
  UserWithdrawalBankAccount UserWithdrawalBankAccount[]
  Messages                  Messages[]
  Model                     Model?
  UserAttachments           UserAttachments[]
  Post                      Post[]
  UserBanks                 UserBanks[]
  PostComment               PostComment[]
}

model Participants {
  id            Int             @id @default(autoincrement())
  user_1        String
  user_2        String
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  Conversations Conversations[]
}

model Conversations {
  id              Int            @id @default(autoincrement())
  conversation_id String         @unique
  participants    Participants[]
  messages        Messages[]
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
}

model Messages {
  id              Int             @id @default(autoincrement())
  message_id      String          @unique
  sender_id       String
  receiver_id     String
  seen            Boolean         @default(false)
  message         String          @db.LongText
  attachment      Json?           @db.Json
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  sender          User            @relation(fields: [sender_id], references: [user_id])
  ReportMessage   ReportMessage[]
  Conversations   Conversations?  @relation(fields: [conversationsId], references: [conversation_id])
  conversationsId String?

  @@index([sender_id], map: "Messages_sender_id_fkey")
}

model Model {
  id                  Int      @id @default(autoincrement())
  firstname           String
  lastname            String
  user_id             Int      @unique
  gender              String
  dob                 DateTime
  country             String
  hookup              Boolean  @default(false)
  verification_video  String?  @db.LongText
  verification_image  String?  @db.LongText
  verification_status Boolean  @default(false)
  payment_reference   String?  @db.LongText

  user User @relation(fields: [user_id], references: [id])

  created_at DateTime @default(now())
}

model UserMedia {
  id            Int      @id @default(autoincrement())
  media_id      String
  post_id       Int
  media_type    String
  url           String   @db.LongText
  blur          String   @db.LongText
  poster        String   @db.LongText
  locked        Boolean  @default(false)
  accessible_to String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  post          Post     @relation(fields: [post_id], references: [id])

  @@index([post_id], map: "UserMedia_user_id_fkey")
}

model UserRepost {
  id         Int      @id @default(autoincrement())
  repost_id  String
  user_id    Int
  post_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  post       Post     @relation(fields: [post_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@index([post_id], map: "UserRepost_post_id_fkey")
  @@index([user_id], map: "UserRepost_user_id_fkey")
}

model UserStory {
  id           Int      @id @default(autoincrement())
  story_id     Int
  user_id      Int
  story        String   @db.LongText
  story_type   String
  posted_at    DateTime @default(now())
  expected_end DateTime
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  user         User     @relation(fields: [user_id], references: [id])

  @@index([user_id], map: "UserStory_user_id_fkey")
}

model Post {
  id              Int           @id @default(autoincrement())
  post_id         String
  was_repost      Boolean       @default(false)
  user_id         Int
  content         String        @db.LongText
  media           Json?
  post_status     String
  post_audience   PostAudience
  post_is_visible Boolean       @default(true)
  post_likes      Int           @default(0)
  post_comments   Int           @default(0)
  post_reposts    Int           @default(0)
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  PostComment     PostComment[]
  PostLike        PostLike[]
  PostShared      PostShared[]
  ReportPost      ReportPost[]
  UserRepost      UserRepost[]

  user      User        @relation(fields: [user_id], references: [id])
  UserMedia UserMedia[]
}

model PostComment {
  id                     Int                      @id @default(autoincrement())
  comment_id             String
  user_id                Int
  post_id                Int
  comment                String
  created_at             DateTime                 @default(now())
  updated_at             DateTime                 @updatedAt
  post                   Post                     @relation(fields: [post_id], references: [id])
  ReportComment          ReportComment[]
  PostCommentAttachments PostCommentAttachments[]
  user                   User                     @relation(fields: [user_id], references: [id])

  @@index([post_id], map: "PostComment_post_id_fkey")
}

model PostCommentAttachments {
  id         Int      @id @default(autoincrement())
  comment_id Int
  path       String
  type       String
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Comment PostComment @relation(fields: [comment_id], references: [id])
}

model PostLike {
  id         Int      @id @default(autoincrement())
  like_id    Int
  user_id    Int
  post_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  post       Post     @relation(fields: [post_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@index([post_id], map: "PostLike_post_id_fkey")
  @@index([user_id], map: "PostLike_user_id_fkey")
}

model PostShared {
  id         Int      @id @default(autoincrement())
  shared_id  String
  user_id    Int?
  post_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  post       Post     @relation(fields: [post_id], references: [id])
  user       User?    @relation(fields: [user_id], references: [id])

  @@index([post_id], map: "PostShared_post_id_fkey")
  @@index([user_id], map: "PostShared_user_id_fkey")
}

model Follow {
  id          Int      @id @default(autoincrement())
  follow_id   String   @unique
  user_id     Int
  follower_id Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  users       User     @relation(fields: [user_id], references: [id])

  @@index([user_id], map: "Follow_user_id_fkey")
}

model Subscribers {
  id            Int      @id @default(autoincrement())
  sub_id        String
  user_id       Int
  subscriber_id Int
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  user          User     @relation(fields: [user_id], references: [id])

  @@index([user_id], map: "Subscribers_user_id_fkey")
}

model LiveStream {
  id                Int                 @id @default(autoincrement())
  user_id           String
  live_id           String
  title             String
  description       String
  image             String              @db.LongText
  video             String              @db.LongText
  live_status       String
  live_start        DateTime            @default(now())
  live_end          DateTime?
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  user              User                @relation(fields: [user_id], references: [user_id])
  LiveStreamComment LiveStreamComment[]
  LiveStreamLike    LiveStreamLike[]
  ReportLive        ReportLive[]

  @@index([user_id], map: "LiveStream_user_id_fkey")
}

model LiveStreamComment {
  id              Int        @id @default(autoincrement())
  live_comment_id String
  user_id         Int
  live_id         Int
  comment         String
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt
  live            LiveStream @relation(fields: [live_id], references: [id])
  user            User       @relation(fields: [user_id], references: [id])

  @@index([live_id], map: "LiveStreamComment_live_id_fkey")
  @@index([user_id], map: "LiveStreamComment_user_id_fkey")
}

model LiveStreamLike {
  id           Int        @id @default(autoincrement())
  live_like_id String
  user_id      Int
  live_id      Int
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  live         LiveStream @relation(fields: [live_id], references: [id])
  user         User       @relation(fields: [user_id], references: [id])

  @@index([live_id], map: "LiveStreamLike_live_id_fkey")
  @@index([user_id], map: "LiveStreamLike_user_id_fkey")
}

model LiveStreamView {
  id         Int      @id @default(autoincrement())
  user_id    Int
  live_id    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id])

  @@index([user_id], map: "LiveStreamView_user_id_fkey")
}

model Settings {
  id                    Int      @id @default(autoincrement())
  user_id               Int      @unique
  price_per_message     Float
  subscription_active   Boolean  @default(false)
  enable_free_message   Boolean
  subscription_price    Float
  subscription_type     String
  subscription_duration String
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  user                  User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([user_id], map: "Settings_user_id_fkey")
}

model Notifications {
  id              Int      @id @default(autoincrement())
  notification_id String
  user_id         Int
  message         String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  user            User     @relation(fields: [user_id], references: [id])

  @@index([user_id], map: "Notifications_user_id_fkey")
}

model ReportUser {
  id          Int      @id @default(autoincrement())
  report_id   String
  user_id     Int
  reported_id String
  report_type String
  report      String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  reportUser  User     @relation(fields: [user_id], references: [id])

  @@index([user_id], map: "ReportUser_user_id_fkey")
}

model ReportPost {
  id          Int      @id @default(autoincrement())
  report_id   String
  user_id     Int
  post_id     Int
  report_type String
  report      String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  post        Post     @relation(fields: [post_id], references: [id])
  user        User     @relation(fields: [user_id], references: [id])

  @@index([post_id], map: "ReportPost_post_id_fkey")
  @@index([user_id], map: "ReportPost_user_id_fkey")
}

model ReportComment {
  id          Int         @id @default(autoincrement())
  report_id   String
  user_id     Int
  comment_id  Int
  report_type String
  report      String
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  comment     PostComment @relation(fields: [comment_id], references: [id])
  user        User        @relation(fields: [user_id], references: [id])

  @@index([comment_id], map: "ReportComment_comment_id_fkey")
  @@index([user_id], map: "ReportComment_user_id_fkey")
}

model ReportLive {
  id          Int        @id @default(autoincrement())
  report_id   String
  user_id     Int
  live_id     Int
  report_type String
  report      String
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  comment     LiveStream @relation(fields: [live_id], references: [id])
  user        User       @relation(fields: [user_id], references: [id])

  @@index([live_id], map: "ReportLive_live_id_fkey")
  @@index([user_id], map: "ReportLive_user_id_fkey")
}

model ReportMessage {
  id          Int      @id @default(autoincrement())
  report_id   String
  user_id     Int
  message_id  Int
  report_type String
  report      String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  message     Messages @relation(fields: [message_id], references: [id])
  user        User     @relation(fields: [user_id], references: [id])

  @@index([message_id], map: "ReportMessage_message_id_fkey")
  @@index([user_id], map: "ReportMessage_user_id_fkey")
}

model UserPoints {
  id                 Int                  @id @default(autoincrement())
  user_id            Int                  @unique
  points             Int                  @db.Int
  conversion_rate    Float
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  user               User                 @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  UserPointsPurchase UserPointsPurchase[]
}

model UserWallet {
  id              Int               @id @default(autoincrement())
  user_id         Int
  wallet_id       String
  balance         Float
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  UserTransaction UserTransaction[]
  user            User              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([user_id], map: "UserWallet_user_id_fkey")
}

model UserTransaction {
  id                  Int             @id @default(autoincrement())
  transaction_id      String
  user_id             Int
  wallet_id           Int
  amount              Float
  transaction_message String          @db.LongText
  transaction         String
  created_at          DateTime        @default(now())
  transaction_type    TransactionType
  updated_at          DateTime        @updatedAt
  user                User            @relation(fields: [user_id], references: [id])
  UserWallet          UserWallet      @relation(fields: [wallet_id], references: [id])

  @@index([user_id], map: "UserTransaction_user_id_fkey")
  @@index([wallet_id], map: "UserTransaction_wallet_id_fkey")
}

model UserSubscriptionCurrent {
  id                      Int                       @id @default(autoincrement())
  subscription_id         String
  user_id                 Int
  subscription            String
  created_at              DateTime                  @default(now())
  updated_at              DateTime                  @updatedAt
  user                    User                      @relation(fields: [user_id], references: [id])
  UserSubscriptionHistory UserSubscriptionHistory[]

  @@index([user_id], map: "UserSubscriptionCurrent_user_id_fkey")
}

model UserSubscriptionHistory {
  id                        Int                      @id @default(autoincrement())
  subscription_id           String
  user_id                   String
  subscription              String
  created_at                DateTime                 @default(now())
  updated_at                DateTime                 @updatedAt
  userSubscriptionCurrentId Int?
  UserSubscriptionCurrent   UserSubscriptionCurrent? @relation(fields: [userSubscriptionCurrentId], references: [id])

  @@index([userSubscriptionCurrentId], map: "UserSubscriptionHistory_userSubscriptionCurrentId_fkey")
}

model GlobalPointsBuy {
  id              Int      @id @default(autoincrement())
  points_buy_id   String
  points          Int
  amount          Float
  conversion_rate Float
  currency        String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model UserWithdrawalBankAccount {
  id              Int      @id @default(autoincrement())
  user_id         Int
  bank_account_id String
  bank_name       String
  account_name    String
  account_number  String
  routing_number  String
  bank_country    String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  user            User     @relation(fields: [user_id], references: [id])

  @@index([user_id], map: "UserWithdrawalBankAccount_user_id_fkey")
}

model UserPointsPurchase {
  id           Int         @id @default(autoincrement())
  purchase_id  String      @unique
  user_id      Int
  points       Int
  amount       Float
  success      Boolean
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  userPointsId Int?
  UserPoints   UserPoints? @relation(fields: [userPointsId], references: [id])

  @@index([userPointsId], map: "UserPointsPurchase_userPointsId_fkey")
}

model UserAttachments {
  id         Int      @id @default(autoincrement())
  path       String
  type       String
  name       String
  size       Int
  extension  String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    User @relation(fields: [user_id], references: [id])
  user_id Int
}

model UserBanks {
  id             Int      @id @default(autoincrement())
  user_id        Int
  bank_id        String
  bank_name      String
  account_name   String
  account_number String   @unique
  routing_number String?
  swift_code     String?
  bank_country   String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  user           User     @relation(fields: [user_id], references: [id])

  @@index([user_id], map: "UserBanks_user_id_fkey")
}

enum UserRole {
  fan
  model
}

enum PostAudience {
  public
  private
  followers
  subscribers
}

enum TransactionType {
  credit
  debit
  pending
}
